import { Microbe } from '@/components/microbe-match/types';
import { UserProfile } from '@/components/microbe-match/ProfileForm';

export function calculateCompatibility(microbe: Microbe, profile: UserProfile): number {
  let score = 0;

  const favoriteTypeLower = profile.favoriteType.toLowerCase();
  const microbeNameLower = microbe.scientificName.toLowerCase();
  const microbeOccupationLower = microbe.occupation.toLowerCase();

  if (favoriteTypeLower.includes('–±–∞–∫—Ç–µ—Ä') && 
      (microbeNameLower.includes('bacteri') || 
       microbeNameLower.includes('lactobacillus') || 
       microbeNameLower.includes('propion') ||
       microbeNameLower.includes('clostridium') ||
       microbeNameLower.includes('acetobacter'))) {
    score += 40;
  }

  if (favoriteTypeLower.includes('–¥—Ä–æ–∂–∂') && 
      microbeNameLower.includes('saccharomyces')) {
    score += 40;
  }

  if (favoriteTypeLower.includes('–≥—Ä–∏–±') && 
      (microbeNameLower.includes('saccharomyces') || 
       microbeNameLower.includes('myces'))) {
    score += 40;
  }

  const goalLower = profile.goal.toLowerCase();
  
  if (goalLower.includes('–∞–ª–∫–æ–≥–æ–ª') || goalLower.includes('–≤–∏–Ω–æ') || goalLower.includes('–ø–∏–≤')) {
    if (microbeOccupationLower.includes('–∞–ª–∫–æ–≥–æ–ª') || microbe.emoji === 'üç∑') {
      score += 30;
    }
  }

  if (goalLower.includes('–º–æ–ª–æ—á') || goalLower.includes('–π–æ–≥—É—Ä—Ç') || goalLower.includes('–∫–µ—Ñ–∏—Ä')) {
    if (microbeOccupationLower.includes('–º–æ–ª–æ—á') || microbe.emoji === 'ü•õ') {
      score += 30;
    }
  }

  if (goalLower.includes('—Å—ã—Ä')) {
    if (microbeOccupationLower.includes('—Å—ã—Ä') || microbe.emoji === 'üßÄ') {
      score += 30;
    }
  }

  if (goalLower.includes('—Ö–ª–µ–±') || goalLower.includes('–≤—ã–ø–µ—á–∫')) {
    if (microbe.emoji === 'üçû' || microbeOccupationLower.includes('—Ö–ª–µ–±')) {
      score += 30;
    }
  }

  if (goalLower.includes('—É–∫—Å—É—Å')) {
    if (microbeOccupationLower.includes('—É–∫—Å—É—Å') || microbe.products?.includes('—É–∫—Å—É—Å–Ω–∞—è')) {
      score += 30;
    }
  }

  if (goalLower.includes('–±–∏–æ–≥–∞–∑') || goalLower.includes('—ç–Ω–µ—Ä–≥')) {
    if (microbeOccupationLower.includes('–±–∏–æ–≥–∞–∑') || microbe.products?.includes('–º–µ—Ç–∞–Ω')) {
      score += 30;
    }
  }

  if (goalLower.includes('–º–∞—Å–ª')) {
    if (microbeOccupationLower.includes('–º–∞—Å–ª') || microbe.products?.includes('–±—É—Ç–∞–Ω–æ–ª')) {
      score += 30;
    }
  }

  const age = parseInt(profile.age);
  if (!isNaN(age)) {
    if (age < 18) {
      if (microbe.emoji === 'ü•õ' || microbe.emoji === 'üçû' || microbe.emoji === 'üßÄ') {
        score += 10;
      }
    } else if (age >= 18) {
      if (microbe.emoji === 'üç∑' || microbeOccupationLower.includes('–∞–ª–∫–æ–≥–æ–ª')) {
        score += 10;
      }
    }
  }

  return Math.min(score, 100);
}

export function isSuperMatchWorthy(microbe: Microbe, profile: UserProfile): boolean {
  const compatibility = calculateCompatibility(microbe, profile);
  return compatibility >= 60;
}
